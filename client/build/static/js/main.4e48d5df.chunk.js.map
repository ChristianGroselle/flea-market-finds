{"version":3,"sources":["utils/helpers.js","utils/actions.js","components/ProductItemLegacy/index.js","utils/queries.js","assets/spinner.gif","components/ProductItem/index.js","components/PreviewItem/index.js","components/ProductListPreview/index.js","components/BoothPreview/index.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/CategoryDropDown/index.js","pages/Booth.js","components/Nav/index.js","utils/reducers.js","utils/store.js","pages/Success.js","pages/OrderHistory.js","pages/UserProfile.js","pages/BoothCreation.js","App.js","serviceWorker.js","reportWebVitals.js","index.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","UPDATE_PRODUCTS","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","CLEAR_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ProductItemLegacy","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","USER_BOOTHS","ProductItem","item","useDispatch","state","useSelector","image","price","quantity","cart","Card","className","style","marginTop","marginBottom","Header","as","Body","Title","Img","src","alt","Footer","Button","variant","PreviewItem","Col","xs","sm","md","height","width","ProductListPreview","searchText","selectedCategory","dispatch","products","currentCategory","useQuery","loading","data","useEffect","type","forEach","product","then","length","filteredProducts","filter","category","toLowerCase","includes","slice","filterProducts","map","spinner","BoothPreview","Container","textAlign","Stack","direction","gap","Row","ProductList","CategoryMenu","CartItem","placeholder","value","purchaseQuantity","onChange","target","parseInt","role","onClick","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","dotenv","stripePromise","loadStripe","process","STRIPE_PRIVATE_KEY","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","getCart","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","xl","Detail","id","useParams","useState","currentProduct","setCurrentProduct","find","indexedProducts","to","description","itemInCart","cartItem","disabled","p","Jumbotron","children","clear","paddingTop","NoMatch","LOGIN","ADD_ORDER","ADD_BOOTH","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","username","CategoryDropDown","categories","categoryData","DropdownButton","title","onSelect","Dropdown","Item","eventKey","Booth","setSearchText","Navbar","bg","expand","fluid","Brand","href","Toggle","Collapse","Nav","maxHeight","navbarScroll","Form","Control","logout","initialState","reducer","action","newState","createStore","reducers","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","UserProfile","userBoothData","navigate","useNavigate","createdAt","undefined","boothsOwned","boothsManaging","BoothCreation","boothName","addBooth","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4e48d5df.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItemLegacy(item) {\n  // const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  const { image, name, _id, price, quantity } = item;\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise(\"cart\", \"put\", {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 },\n      });\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img alt={name} src={`/images/${image}`} />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>\n          {quantity} {pluralize(\"item\", quantity)} in stock\n        </div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItemLegacy;\n","import { gql } from \"@apollo/client\";\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_BOOTH = gql`\n  {\n    booth {\n      _id\n      boothName\n      owner\n      accountManager\n      product\n      description\n      logo\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      _id\n      firstName\n      lastName\n      username\n      email\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n      createdAt\n    }\n  }\n`;\nexport const USER_BOOTHS = gql`\n  {\n    userBooths {\n      boothName\n      description\n      logo\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/spinner.7e729fec.gif\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\n\nfunction ProductItem(item) {\n  // const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  const { image, name, _id, price, quantity } = item;\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise(\"cart\", \"put\", {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 },\n      });\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <Card\n      className=\"text-center\"\n      style={{ marginTop: \"1rem\", marginBottom: \"1rem\" }}\n    >\n      <Card.Header as=\"h5\">{name}</Card.Header>\n      <Card.Body>\n        <Card.Title>${price}</Card.Title>\n        <Card.Img src={`/images/${image}`} alt={name} />\n        <Card.Body>\n          <p>Short Description.</p>\n          <hr />\n          <p>\n            {quantity} {pluralize(\"item\", quantity)} in stock\n          </p>\n        </Card.Body>\n      </Card.Body>\n      <Card.Footer className=\"text-muted\">\n        <Button variant=\"primary\">Add to cart</Button>\n      </Card.Footer>\n    </Card>\n  );\n}\n\nexport default ProductItem;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport {\n  Card,\n  CardGroup,\n  Col,\n  Row,\n  Container,\n  Button,\n  Stack,\n} from \"react-bootstrap\";\n\nfunction PreviewItem(item) {\n  // const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  const { image, name, _id, price, quantity } = item;\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise(\"cart\", \"put\", {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 },\n      });\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <>\n      <Col xs={12} sm={12} md={6}>\n        <Card style={{ height: \"100%\", width: \"100%\" }}>\n          <Card.Header as=\"h5\">{name}</Card.Header>\n          <Card.Body>\n            <Card.Img src={`/images/${image}`} alt={name} />\n          </Card.Body>\n        </Card>\n      </Col>\n    </>\n  );\n}\n\nexport default PreviewItem;\n","import React, { useEffect } from \"react\";\nimport ProductItem from \"../ProductItem\";\nimport PreviewItem from \"../PreviewItem\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport spinner from \"../../assets/spinner.gif\";\n\nfunction ProductListPreview({ searchText, selectedCategory }) {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  const { products, currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      data.products.forEach((product) => {\n        idbPromise(\"products\", \"put\", product);\n      });\n    } else if (!loading) {\n      idbPromise(\"products\", \"get\").then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    let filteredProducts = state.products;\n\n    if (currentCategory) {\n      filteredProducts = filteredProducts.filter(\n        (product) => product.category._id === currentCategory\n      );\n    }\n\n    if (selectedCategory) {\n      filteredProducts = filteredProducts.filter(\n        (product) => product.category._id === selectedCategory\n      );\n    }\n\n    if (searchText) {\n      filteredProducts = filteredProducts.filter((product) =>\n        product.name.toLowerCase().includes(searchText.toLowerCase())\n      );\n    }\n\n    // Limit the number of products to 4\n    filteredProducts = filteredProducts.slice(-4);\n\n    return filteredProducts;\n  }\n\n  return (\n    <>\n      {products.length ? (\n        <>\n          {filterProducts().map((product) => (\n            <PreviewItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </>\n  );\n}\n\nexport default ProductListPreview;\n","import React, { useEffect } from \"react\";\nimport {\n  Card,\n  CardGroup,\n  Col,\n  Row,\n  Container,\n  Button,\n  Stack,\n} from \"react-bootstrap\";\nimport ProductItem from \"../ProductItemLegacy\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport spinner from \"../../assets/spinner.gif\";\nimport ProductList from \"../ProductListLegacy\";\n\nimport ProductListPreview from \"../ProductListPreview\";\n\nconst BoothPreview = () => {\n  return (\n    <>\n      <Container>\n        <Card style={{ height: \"100%\", width: \"100%\" }}>\n          <Card.Header style={{ textAlign: \"left\" }} as=\"h3\">\n            <Stack direction=\"horizontal\" gap={3}>\n              <div>Booth Name</div>\n              <div className=\"vr\" />\n              <Button>Visit</Button>\n            </Stack>\n          </Card.Header>\n          <Card.Body>\n            <Row xs={1} sm={2} md={4}>\n              {/* {Array.from({ length: 1 }).map((_, idx) => ( */}\n              {/* <Col key={idx} xs={12} sm={6} md={3}> */}\n              {/* <Card style={{ height: \"100%\", width: \"100%\" }}>\n                    <Card.Header as=\"h5\">Product {idx + 1}</Card.Header>\n                    <Card.Body>\n                      <Card.Img src={`/images/camera.jpg`} alt={`name`} />\n                    </Card.Body>\n                  </Card> */}\n              <ProductListPreview />\n              {/* </Col> */}\n              {/* ))} */}\n            </Row>\n          </Card.Body>\n        </Card>\n      </Container>\n    </>\n  );\n};\n\nexport default BoothPreview;\n","import React, { useEffect } from \"react\";\nimport ProductItem from \"../ProductItem\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport spinner from \"../../assets/spinner.gif\";\n\nfunction ProductList({ searchText, selectedCategory }) {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  const { products, currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      data.products.forEach((product) => {\n        idbPromise(\"products\", \"put\", product);\n      });\n    } else if (!loading) {\n      idbPromise(\"products\", \"get\").then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    let filteredProducts = state.products;\n\n    if (currentCategory) {\n      filteredProducts = filteredProducts.filter(\n        (product) => product.category._id === currentCategory\n      );\n    }\n\n    if (selectedCategory) {\n      filteredProducts = filteredProducts.filter(\n        (product) => product.category._id === selectedCategory\n      );\n    }\n\n    if (searchText) {\n      filteredProducts = filteredProducts.filter((product) =>\n        product.name.toLowerCase().includes(searchText.toLowerCase())\n      );\n    }\n\n    return filteredProducts;\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  // const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\n// import { useStoreContext } from \"../../utils/GlobalState\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n  \n  // const [, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n\n    }\n  }\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { QUERY_CHECKOUT } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport CartItem from \"../CartItem\";\nimport Auth from \"../../utils/auth\";\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport \"./style.css\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\n// stripePromise returns a promise with the stripe object as soon as the Stripe package loads\nconst stripePromise = loadStripe(process.env.STRIPE_PRIVATE_KEY);\nconsole.log(process.env);\n\nconst Cart = () => {\n  // const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  // We check to see if there is a data object that exists, if so this means that a checkout session was returned from the backend\n  // Then we should redirect to the checkout with a reference to our session id\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  // If the cart's length or if the dispatch function is updated, check to see if the cart is empty.\n  // If so, invoke the getCart method and populate the cart with the existing from the session\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise(\"cart\", \"get\");\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  // When the submit checkout method is invoked, loop through each item in the cart\n  // Add each item id to the productIds array and then invoke the getCheckout query passing an object containing the id for all our products\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {/* Check to see if the user is logged in. If so render a button to check out */}\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport BoothPreview from \"../components/BoothPreview\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nimport ProductListPreview from \"../components/ProductListPreview\";\n\nimport {\n  Card,\n  CardGroup,\n  Col,\n  Row,\n  Container,\n  Button,\n  Stack,\n} from \"react-bootstrap\";\n\nconst Home = () => {\n  return (\n    <Container>\n      <Row>\n        <Col xl=\"4\" md=\"6\" sm=\"12\">\n          <BoothPreview />\n        </Col>\n        <Col xl=\"4\" md=\"6\" sm=\"12\">\n          <BoothPreview />\n        </Col>\n        <Col xl=\"4\" md=\"6\" sm=\"12\">\n          <BoothPreview />\n        </Col>\n      </Row>\n      <Cart />\n    </Container>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport Cart from '../components/Cart';\n// import { useStoreContext } from '../utils/GlobalState';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  // const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_BOOTH = gql`\n  mutation addBooth($boothName: String!, $description: String!) {\n    addBooth(boothName: $boothName, description: $description) {\n      boothName\n      description\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $username: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      username: $username\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n// export const ADD_BOOTH = gql`\n//   mutation addUser(\n//     $firstName: String!\n//     $lastName: String!\n//     $email: String!\n//     $password: String!\n//   ) {\n//     addUser(\n//       firstName: $firstName\n//       lastName: $lastName\n//       email: $email\n//       password: $password\n//     ) {\n//       token\n//       user {\n//         _id\n//       }\n//     }\n//   }\n// `;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: \"\", password: \"\" });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n        username: formState.username,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"username\">username:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"username\"\n            type=\"username\"\n            id=\"username\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from \"../../utils/actions\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction CategoryDropDown() {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n  const { categories, currentCategory } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise(\"categories\", \"put\", category);\n      });\n    } else if (!loading) {\n      idbPromise(\"categories\", \"get\").then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleSelect = (id) => {\n    if (id === \"none\") {\n      dispatch({\n        type: UPDATE_CURRENT_CATEGORY,\n        currentCategory: null,\n      });\n    } else {\n      dispatch({\n        type: UPDATE_CURRENT_CATEGORY,\n        currentCategory: id,\n      });\n    }\n  };\n\n  return (\n    <DropdownButton\n      id=\"category-dropdown\"\n      title={\n        currentCategory\n          ? categories.find((category) => category._id === currentCategory).name\n          : \"Choose a Category\"\n      }\n      onSelect={handleSelect}\n    >\n      <Dropdown.Item key=\"none\" eventKey=\"none\">\n        None\n      </Dropdown.Item>\n      {categories.map((category) => (\n        <Dropdown.Item key={category._id} eventKey={category._id}>\n          {category.name}\n        </Dropdown.Item>\n      ))}\n    </DropdownButton>\n  );\n}\n\nexport default CategoryDropDown;\n","import React, { useState } from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryDropDown from \"../components/CategoryDropDown\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\n\nconst Booth = () => {\n  const [searchText, setSearchText] = useState(\"\");\n\n  const handleSearchChange = (event) => {\n    setSearchText(event.target.value);\n  };\n\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand href=\"#\">Booth Name</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbarScroll\" />\n          <Navbar.Collapse id=\"navbarScroll\">\n            <Nav\n              className=\"me-auto my-2 my-lg-0\"\n              style={{ maxHeight: \"100px\" }}\n              navbarScroll\n            ></Nav>\n            <Form className=\"d-flex\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Search products\"\n                value={searchText}\n                onChange={handleSearchChange}\n              />\n            </Form>\n            <CategoryDropDown />\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      <Container>\n        <ProductList searchText={searchText} />\n      </Container>\n    </>\n  );\n};\n\nexport default Booth;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/userProfile\">User Profile</Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">Order History</Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">Signup</Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">Login</Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">\n            🛍️\n          </span>\n          Flea Market Finds\n        </Link>\n      </h1>\n\n      <nav>{showNavigation()}</nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","// import { useReducer } from \"react\";\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from \"./actions\";\n\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: '',\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity\n          }\n          return product\n        })\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      }\n\n    default:\n      return state;\n  }\n};\n\n// export function useProductReducer(initialState) {\n//   return useReducer(reducer, initialState)\n// }\nexport default reducer;","// Creates a Redux store that holds the state of the app. Only one store should exist.\nimport { createStore } from 'redux';\n\n// Importing the reducer file that is mostly unchanged\nimport reducers from './reducers';\n\nexport default createStore(reducers);","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the home page</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n// import Auth from \"../../utils/auth\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_BOOTH, QUERY_USER, USER_BOOTHS } from \"../utils/queries\";\n\nconst UserProfile = () => {\n  const { data } = useQuery(QUERY_USER);\n  const { userBoothData } = useQuery(USER_BOOTHS);\n  let user;\n  console.log(userBoothData);\n  // const { boothData } = useQuery(QUERY_BOOTH);\n  // console.log('booth data:');\n  // console.log(boothData);\n\n  if (data) {\n    user = data.user;\n  }\n\n  const navigate = useNavigate();\n\n  // display array of products ordered:\n  // const ordersArray = () => {\n  //     user.orders[0].map((product) => (\n  //     <li key={user.orders._id}>\n  //         {product.name} - {product.price}\n  //     </li>\n  //     ));\n  // }\n\n  // console.log(ordersArray);\n\n  const navigateToBooth = () => {\n    navigate(\"/\");\n  };\n\n  const createBooth = () => {\n    navigate(\"/boothCreation\");\n  };\n\n  return (\n    <div className=\"container my-1\">\n      {user ? (\n        <>\n          <h2>\n            {user.firstName} {user.lastName}\n          </h2>\n\n          <h4>User Profile Info</h4>\n          <ul>\n            <li>_id: {user._id}</li>\n            <li>Username: {user.username}</li>\n            <li>Email: {user.email}</li>\n            <li>Created At: {user.createdAt}</li>\n\n            <li>\n              Orders PurchasedAt (Work in Progress):\n              {user.orders[0] !== undefined ? user.orders[0].purchaseDate : \"\"}\n            </li>\n            {/* <li>\n              Orders Products (Work in Progress):{\" \"}\n              {user.orders[0] !== undefined\n                ? user.orders[0].products[0].name\n                : \"\"}\n            </li> */}\n            <li>\n              {user.orders.map((order) => {\n                return (\n                  <p key={order._id}>\n                    {order.products.map((product) => {\n                      return (\n                        <span key={product._id}>\n                          {product.name} - {product.price}\n                        </span>\n                      );\n                    })}\n                  </p>\n                );\n              })}\n            </li>\n            <li>Booths Owned (Work in Progress): {user.boothsOwned}</li>\n            <li>Booths Managing (Work in Progress): {user.boothsManaging}</li>\n          </ul>\n\n          <h4>User Profile Functions</h4>\n\n          <button onClick={navigateToBooth}>Go to Booth</button>\n\n          <button onClick={createBooth}>Booth Creation</button>\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default UserProfile;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_BOOTH } from '../utils/mutations';\n\nfunction BoothCreation() {\n    const [formState, setFormState] = useState({ boothName: '', description: ''});\n    const [addBooth] = useMutation(ADD_BOOTH);\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n        const mutationResponse = await addBooth({\n            variables: {\n                boothName: formState.boothName,\n                description: formState.description\n            },\n        });\n        const token = mutationResponse.data.addBooth.token;\n    };\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setFormState({\n            ...formState,\n            [name]: value\n        });\n    };\n\n    return (\n        <div className='container my-1'>\n\n            <h2>Booth Creation</h2>\n            <form onSubmit={handleFormSubmit}>\n                <div className='flex-row space-between my-2'>\n                    <label htmlFor='boothName'>Booth Name:</label>\n                    <input\n                        placeholder=\"booth name\"\n                        name=\"boothName\"\n                        type=\"boothName\"\n                        id=\"boothName\"\n                        onChange={handleChange}\n                    />\n                </div>\n                <div className='flex-row space-between my-2'>\n                    <label htmlFor='description'>Booth Description:</label>\n                    <input\n                        placeholder=\"booth description\"\n                        name=\"description\"\n                        type=\"text\"\n                        id=\"description\"\n                        onChange={handleChange}\n                    />\n                </div>\n                <div className='flex-row space-between my-2'>\n                    <label htmlFor='logo'>Logo:</label>\n                    <input\n                        placeholder=\"logo\"\n                        name=\"logo\"\n                        type=\"file\"\n                        id=\"logo\"\n                        onChange={handleChange}\n                    />\n                </div>\n                {/* <div className='flex-row space-between my-2'>\n                    <label htmlFor='product'>Add Products:</label>\n                    <input\n                        placeholder=\"product\"\n                        name=\"product\"\n                        type=\"product\"\n                        id=\"product\"\n                        onChange={handleChange}\n                    />\n                </div> */}\n                <div className='flex-row flex-end'>\n                    <button type=\"submit\">Create Booth</button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default BoothCreation;","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n// import * as dotenv from \"dotenv\";\n// dotenv.config();\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Booth from \"./pages/Booth\";\nimport Nav from \"./components/Nav\";\n// import { StoreProvider } from './utils/GlobalState';\nimport { Provider } from \"react-redux\";\nimport store from \"./utils/store\";\n\nimport Success from \"./pages/Success\";\nimport OrderHistory from \"./pages/OrderHistory\";\nimport UserProfile from \"./pages/UserProfile\";\nimport BoothCreation from \"./pages/BoothCreation\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          {/* <StoreProvider> */}\n          <Provider store={store}>\n            <Nav />\n            <Routes>\n              <Route path=\"/\" element={<Home />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/signup\" element={<Signup />} />\n              <Route path=\"/success\" element={<Success />} />\n              <Route path=\"/orderHistory\" element={<OrderHistory />} />\n              <Route path=\"/products/:id\" element={<Detail />} />\n              <Route path=\"/booth\" element={<Booth />} />\n              <Route path=\"/userProfile\" element={<UserProfile />} />\n              <Route path=\"*\" element={<NoMatch />} />\n              <Route path=\"/boothCreation\" element={<BoothCreation />} />\n            </Routes>\n          </Provider>\n          {/* </StoreProvider> */}\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}